---
  haskell:
    install:
      debian: sudo apt-get install haskell-platform
      fedora: sudo yum install haskell-platform
      macos: curl -sSL https://get.haskellstack.org/ | sh
    invoke:
      all: haskell {args}
  python3.6:
    install:
      debian: sudo apt-get install python3.6
    invoke:
      all: python3.6 {args}
  python2.7:
    install:
      debian: sudo apt-get install python2.7
    invoke:
      all: python2.7 {args}
  jdk11:
    install:
      debian:
        script: |-
          sudo curl https://d3pxv6yz143wms.cloudfront.net/11.0.4.11.1/java-11-amazon-corretto-jdk_11.0.4.11-1_amd64.deb > /tmp/corettojdk11.deb 2>/dev/null
          sudo dpkg --install /tmp/corettojdk11.deb 2>/dev/null
      macos:
        skipif: java -version 2>&1|egrep -i '(java|jdk|jre) *(version)?[ "]*(1.8|8|9|1[0-9])\.'
        script: |-
            curl https://d3pxv6yz143wms.cloudfront.net/11.0.3.7.1/amazon-corretto-11.0.3.7.1-macosx-x64.pkg>/tmp/c11.pkg
            open /tmp/c11.pkg
    invoke:
      macos: /usr/libexec/java_home -v 11 --request -exec {args}
      linux: java {args}
  git:
      install:
          debian:
              skipif: onpath git
              script: sudo apt-get install git
          macos:
              skipif: onpath git
              script: brew install git
      requires:
        macos: homebrew
  homebrew:
      install:
        macos:
            skipif: onpath brew
            script: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

#launchers:
  docker:
    startup:
      macos: open /Applications/Docker.app
    install:
      skipif: onpath docker
      debian: |-
        curl -sSL https://get.docker.com/ | sh 2>/dev/null
      fedora: sudo dnf install docker
      macos:
          skipif: exists /Applications/Docker.app
          script: |-
            find $(brew --cache)/downloads/ -name *Docker.dmg.incomplete | xargs rm -f
            brew cask install docker
    requires:
        macos:
            homebrew
  plain:
    startup:
      all: "{platform.invoke} {args}"

#services:
  localhttp:
      class: com.aws.iot.httpservice.SimpleHttpServer

  greenlake:
    install:
      debian: |-
        sudo add-apt-repository https://aws.amazon.com/iot/apt
        sudo apt-get install greenlake
    throttleBandwidth: 100 kb/s
  hello-docker:
      requires: docker
      startup: docker run hello-world

  hello-docker-nginx:
      requires: docker
      startup:  |-
        echo 0 > cid
        docker run --cidfile=cid nginx
      shutdown: cat cid | xargs docker stop

  monitoring:
    install:
      debian: |-
        sudo add-apt-repository https://aws.amazon.com/iot/apt
        sudo apt-get install monitoring
    requires: greenlake
  mqtt:
    defaultimpl: mqtt.moquette
    moquette:
      startup:
        macos: nohup $HOME/moquette/bin/moquette.sh >> $HOME/moquette/broker.log &
      install:
        macos:
          skipif: ls $HOME/moquette/bin | egrep -i -q moquette.sh
          script: |-
            curl -L https://bintray.com/artifact/download/andsel/generic/moquette-0.12.1.tar.gz > $HOME/moquette-0.12.1.tar.gz
            mkdir $HOME/moquette
            tar -zxf $HOME/moquette-0.12.1.tar.gz -C $HOME/moquette
      shutdown:
        macos:
          script: kill $(pgrep -f io.moquette.broker.Server)
    mosquitto:
      startup:
        macos: brew services restart mosquitto
      install:
        macos:
          skipif: brew list | egrep -i -q mosquitto
          script:  brew install mosquitto
      shutdown:
        macos:
          script: brew services stop mosquitto
      requires:
        macos:
          homebrew
    tinyembeddedthing:
      installer: whatever
        
  fallbackMain:  # This service only gets invoked if the main service fails to even begin to boot
    startup: echo sudo reboot -force   # TODO: this is stupid.  Should try to talk to cloud

  main:
      install:
          skipif: true
          all: echo All installed
      requires: jdk11, git, hello-docker, hello-docker-nginx, mqtt
      xyzzy: localhttp
      startup: |-
        pwd
        while true; do
        date; echo RUNNING; sleep 10
        done
      download:
        hw.jar: http://foo/hw.jar
      args: -jar {hw.jar}
